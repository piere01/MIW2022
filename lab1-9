import math as m
import numpy as np
import json


a = '11'
b = 1
c = '0'
 
print("{0}, {1}, {2}".format(type(a),type(b),type(c)))
 
tab = ["Ala", "ma", "kota", "kot", "ma", "Ale"]
 
text = ' '.join(tab)
 
print(text.split(' '))
 
sentence = "Metody Inżynierii Wiedzy są najlepsze"
 
 #nie działa, do poprawy
def splitBZ(text):
    list = []
    tmp = ''
    for przerwa in text:
        if przerwa == ' ':
            list.append(tmp)
            tmp = ''
        else:
            tmp += przerwa
    list.append(tmp)
print(splitBZ("ala ma kota"))

def haslo(text):
    poprawne = False
    dlugosc = False
    duze = False
    male = False
    specjal = False
    if len(text) >= 10:
        dlugosc = True
    for a in text:
        if text.isupper():
            duze = True
        if text.islower():
            male = True
        if a == '!':
            specjal = True
    if dlugosc  and duze  and male  and specjal:
        poprawne = True
    return poprawne
print(haslo("ZAQ!2wsx"))

print(sentence)
print(len(sentence))
 
sentence = sentence.lower()
 
sentence = sentence.replace('ż', 'z')
sentence = sentence.replace('ą', 'a')
 
print(sentence)
print(len(sentence))
 
my_set = set(sentence)
 
print(my_set)
print(len(my_set))
 
string = "Napis"
long_string = "Długi napis jest"
 
tubka = (string, long_string)
print(tubka)
 
 
list_letters = ['c','b','d','b']; list_number = [2,1,3,7]; list_all = list_letters + list_number 
print(list_all.index('c'))

thisdict = {
  "brand": "Ford",
  "model": "Mustang",
  "year": 1964
}
print(thisdict)
print(thisdict["brand"])

print(bool(' '))
print(bool(''))
print(bool(0))
print(bool(1))
print(bool('0'))
print(bool('1'))
print(bool([]))
print(bool(['','']))

for u in range(21):
    print(u)

lista = [1,2,3,4,5,6,7,8,99,10]
a = 0
while a < len(lista):
    if lista[a] == 99:
        print(a)
    a += 1

with open("abc.txt", "r") as file:
    print(file.readlines())

jezyki = ["python","c++","java"]
with open ('jezyki.txt', 'w') as file:
    for jezyk in jezyki:
        file.write(jezyk + "\n")
        
lista = []
with open("australian.dat", "r") as file:
    for line in file:
        lista.append(list(map(lambda x: float(x),line.split())))

for x in range(3):
    print(lista[x])
    
miasta = ["olsztyn","ostrołęka","Gdańsk","Poznań"]
wynik = list(map(lambda x: x[:3], miasta))

for x in range(4):
    print(wynik[x])
    
def euklides(lista, lista2):
    a = 0
    for x in range(len(lista)):
        a+=m.pow(lista[x]-lista2[x],2)
    wynik=m.sqrt(a)
    return wynik
print(euklides(lista[2], lista[5]))

def newest_neighbour(lista,index,nn):
    a=dict()
    for x in range(0,len(lista)):
        decyzyjka=lista[x][index]
        if decyzyjka in a.keys():
           a[decyzyjka].append(euklides(nn, lista[x]))
        else:
            a[decyzyjka]=[euklides(nn,lista[x])]
    return a
grupa = newest_neighbour(lista, 14, [15,2,3,4,8,7,9,1,5,4,2,3,1,2])
grupa[1].sort()
print(sum(grupa[1][:8]))

def mierzymy(x, lista):
    wynik = {0: [], 1: []}
    dl = max(len(x), len(lista[0])) - 1
    for i in range(len(lista)):
        wynik[lista[i][dl]].append(euklides(x, lista[i]))
    return wynik

def mierzymyTupki(x, lista):
    wynik = []
    dl = max(len(x), len(lista[0])) - 1
    for i in range(len(lista)):
        wynik.append((lista[i][dl], euklides(x, lista[i])))
    return wynik

def grupujemy(listaTupek):
    wynik = {}
    for tupka in listaTupek:
        if tupka[0] not in wynik.keys():
            wynik[tupka[0]] = [tupka[1]]
        else:
            wynik[tupka[0]].append(tupka[1])
    return wynik

def min_klasa(klasy, ile):
    for key in klasy.keys():
        suma = 0
        lista = sorted(klasy.get(key))
        for i in range(ile):
            suma += lista[i]
        klasy[key] = suma
    return klasy
x = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
#print(mierzymyTupki(x, lista))
#print(grupujemy(mierzymyTupki(x, lista)))
#print(min_klasa(grupujemy(mierzymyTupki(x, lista)), 3))

def odleglosc(lista,index,cel):
    a=dict()
    b=lista[cel]
    for x in range(1,len(lista)):
        decyzyjka=lista[x][index]
    if decyzyjka in a.keys():
        a[decyzyjka].append(euklides(b, lista[x]))
    else:
        a[decyzyjka]=[euklides(b, lista[x])]
    return a
print(odleglosc(lista,7,0))

def min_odl(x):
    keys=list(x.keys())
    a=1
    klasa=keys[0]
    min=x[keys[0]]
    for key in keys[1:]:
        if min > x[key]:
            min = x[key]
            klasa=key
            a=1
        elif min == x[key]:
            a+=1
    return klasa
print(min_odl(odleglosc(lista,7,0)))

def euklidesowav2(a,b):
    v1 = np.array(a)
    v2=np.array(b)
    x=v2-v1
    return m.sqrt(np.dot(x,x)) 

def srednia(lista):
    suma = 0
    for elem in lista:
        suma += elem
        wynik = suma / len(lista)
    return wynik

def sredniav2(wektor):
    x=len(wektor)
    return (np.dot(wektor, np.ones(x))/x)

def wariancje(lista):
    x = srednia(lista)
    suma = 0
    for elem in lista:
        suma += (elem - x) ** 2
        wynik = suma / len(lista)
    return wynik

def wariancjev2(wektor):
    l=len(wektor)
    s=np.dot(sredniav2(wektor),np.ones(l))
    x= np.subtract(wektor,s)**2
    return x

def odchylenie(lista):
    return m.sqrt(wariancje(lista))

list= np.array([1,2,3,40])
print (list)
print(srednia(list))
print (sredniav2(list))
print(wariancje(list))
print(wariancjev2(list))
print(odchylenie(list))
euk1=lista[0]
euk2=lista[2]
print(euklidesowav2(euk1,euk2))

def funkcja(x):
    return x ** 2
def monteCarlo(funkcja, poziom, pion, punkty):
    PodWykresem = 0
    punkty_x = np.random.uniform(0, poziom, punkty)
    punkty_y = np.random.uniform(0, pion, punkty)
    punkty_y_wyliczone = [funkcja(x) for x in punkty_x]
    for i in range(len(punkty_y)):
        if punkty_y[i] <= punkty_y_wyliczone[i]:
            PodWykresem += 1
    x = PodWykresem / punkty * poziom * pion
    wynik = round(x, 10)
    return wynik
print(monteCarlo(funkcja, 15, 15, 500))

def metodaProstokatow(funkcja, poziom, podzialy):
    suma = 0
    for i in range(1, podzialy + 1):
        x_0 = poziom / podzialy * (i - 1)
        x_1 = poziom / podzialy * i
        y_0 = funkcja(x_0)
        y_1 = funkcja(x_1)
        srednia = (y_0 + y_1) / 2
        suma += srednia
        wynik = suma / podzialy
    return wynik
print(metodaProstokatow(funkcja, 20, 500))

def odwrotnosc(lista):
    kowar = np.dot(lista.T,lista)
    odwrotnosc = np.linalg.inv(kowar)
    return np.dot(odwrotnosc,lista.T)

def regresja_liniowa(lista):
    os_x=np.array([[1,x[0]]for x in lista])
    os_y=np.array([x[1]for x in lista])
    odw = odwrotnosc(os_x)
    return np.dot(odw,os_y)

testowe = np.array([[2,1],[1,2],[3,3]])
print(regresja_liniowa(testowe))

def proj(u, a):
    gorau = np.dot(u.T, a)
    dolu = np.dot(u.T, u)
    if dolu == 0:
        return u
    return np.multiply(u, gorau / dolu)

def macierz_QR(macierz):
    v = []
    e = []
    u = []
    for i in range(macierz.shape[1]):
        v.append(np.array([x[i] for x in macierz]))
        subtraction = v[i]
        if i == 0:
            u.append(v[0])
        else:
            for j in range(i):
                subtraction = np.subtract(subtraction, proj(u[j], v[i]))
            u.append(subtraction)
        len_u = euklides([0 for _ in range(macierz.shape[0])], u[i])
        if len_u == 0:
            len_u = 1
        e.append(u[i] / len_u)
    Q = np.array(e)
    R = np.dot(Q, macierz)
    print(np.around(Q.T, decimals=2))
    print(np.around(R, decimals=2))
    print(np.around(np.dot(Q.T, R), decimals=1))
    return Q

def macierz(a):
    x=macierz_QR(a)
    return np.dot(np.dot(x.T, a),x)

def wartosc_wlasna_macierzy(a):
    x = a
    while (np.diag(x) - np.dot(x, np.ones((x.shape[0], 1))).T).all() > 0.01:
        x = macierz(x)
    return np.diag(x)

def gauss(matrix):
    column_len = len(matrix.T[0])

    for x in range(column_len):
        if matrix[x][x] == 0:
            matrix[x][x] = 1
            
        for y in range(column_len):
            if x != y:
                factor = matrix[y][x]/matrix[x][x]

                for z in range(column_len + 1):
                    matrix[y][z] = matrix[y][z] - factor * matrix[x][z]
    return [matrix[i][column_len]/matrix[i][i] for i in range(column_len)]





